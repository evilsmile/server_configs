
user  nginx nginx;
worker_processes  2;

error_log  logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log  logs/access.log  combined;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;

    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;

    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;

    #跟后端服务器连接的超时时间_发起握手等候响应超时时间
    proxy_connect_timeout 600;

    #连接成功后_等候后端服务响应时间_其实已经进入后端的排除之中等候处理
    proxy_read_timeout 600;

    #代理请求缓冲区_这个缓存区间会保存用户的头信息以供nginx进行规则处理_一般只要能保存下头信息即可
    proxy_buffer_size 16k;

    proxy_buffers 4 32k;

    upstream server_pool {
        server 192.168.206.128:80 weight=4 max_fails=2 fail_timeout=30s;
#        server 192.168.206.1:80 weight=4 max_fails=2 fail_timeout=30s;
    }

    server {
        listen 80;
        server_name a.domain.com;

        access_log  logs/a.access.log  combined;

        location / {
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
#            proxy_pass http://server_pool;
            proxy_set_header Host a.domain.com;
            proxy_set_header X-Forwarded-For $remote_addr;

            root   html;
            index  index_138.html index_138.htm;

            if (!-e $request_filename) {
                rewrite ^/(.*)$ /index.html last;
            }

            if ($host ~* (.*)\.domain\.com) {
                set $sub_name $1;
                # rewrite ^/sort\/(\d+)\/?$ /index.html?act=sort&cid=sub_name&id=$1 last;
                ## 目录对换/1234/xxx -> /xxx?id=1234
                rewrite ^/(\d+)/\(.+\)/ /$2?id=$1 last;
            }

            if ($http_user_agent ~ MSIE) {
                rewrite ^(.*)$ /nginx-ie/$1 break;

                #将多级目录下的文件转换成一个文件/job-123-234-5343.html 指向/job/123/234/5343.html
                rewrite ^/job-([0-9]+)-([0-9]+)-([0-9]+)\.html /job/$1/$2/$3.html last;
            }

            if ($host ~* ^(.*?)\.domain\.com$) {
                set $var_wupin_city $1;
                set $var_wupin '1';
            }
            if (!-f $document_root/html/$var_wupin_city/index.htm) {
                set $var_wupin '0';
            }
            if ($var_wupin ~ '1') {
                rewrite ^/wu/$ /html/$var_wupin_city/index.html last;
            }

        }

        #禁止访问以.sh .flv .mp4为文件名后缀的URL
        location ~ .*\.(sh|flv|mp4)?$ { return 500; }
        #禁止访问多个目录
        location ~ ^/(cron|template)/ {
            deny all;
            break;
        }

        ##禁止访问以/data开头的文件
        location ~ ^/data {
            deny all;
        }

        #设置某些类型文件的浏览器缓存时间
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
            expires 30d;
        }


    }

    server {
        listen       80;
        server_name  b.domain.com;

        access_log  logs/b.access.log  combined;

        location / {
            root   html;
            index  index_138.html index_138.htm;
        }

        error_page  404              /404.html;
    }

    server {

        listen 80;
        server_name c.domain.com;

        access_log  logs/c.access.log  combined;

        location / {
            root html;
            index index_148.htm index_148.html;
        }
    }
}
